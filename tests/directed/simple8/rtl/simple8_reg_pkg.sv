// Copyright Nu Quantum Ltd
// SPDX-License-Identifier: MIT
//
// Auto-generated by peakrdl-sv

package simple8_reg_pkg;

  // Address width
  parameter int BlockAw = 12;


  // my_regfile_0_control
  typedef struct packed {
    struct packed {
      logic q;
    } en;
    struct packed {
      logic [1:0]q;
    } sel;
  } simple8_reg2hw_my_regfile_0_control_t;

  // my_regfile_0_status
  typedef struct packed {
    logic q;
  } simple8_reg2hw_my_regfile_0_status_t;

  // my_regfile_0_clkdiv
  typedef struct packed {
    logic [5:0]q;
  } simple8_reg2hw_my_regfile_0_clkdiv_t;

  // my_regfile_1_control
  typedef struct packed {
    struct packed {
      logic q;
    } en;
    struct packed {
      logic [1:0]q;
    } sel;
  } simple8_reg2hw_my_regfile_1_control_t;

  // my_regfile_1_status
  typedef struct packed {
    logic q;
  } simple8_reg2hw_my_regfile_1_status_t;

  // my_regfile_1_clkdiv
  typedef struct packed {
    logic [5:0]q;
  } simple8_reg2hw_my_regfile_1_clkdiv_t;

  // my_ptime
  typedef struct packed {
    logic [7:0]q;
  } simple8_reg2hw_my_ptime_t;

  // my_stb
  typedef struct packed {
    logic [7:0]q;
    logic qe;
  } simple8_reg2hw_my_stb_t;

  // my_wide
  typedef struct packed {
    struct packed {
      logic [7:0]q;
    } data0;
    struct packed {
      logic [7:0]q;
    } data1;
  } simple8_reg2hw_my_wide_t;

  // my_array_0
  typedef struct packed {
    struct packed {
      logic [7:0]q;
    } data0;
    struct packed {
      logic [7:0]q;
    } data1;
  } simple8_reg2hw_my_array_0_t;

  // my_array_1
  typedef struct packed {
    struct packed {
      logic [7:0]q;
    } data0;
    struct packed {
      logic [7:0]q;
    } data1;
  } simple8_reg2hw_my_array_1_t;

  // my_array_2
  typedef struct packed {
    struct packed {
      logic [7:0]q;
    } data0;
    struct packed {
      logic [7:0]q;
    } data1;
  } simple8_reg2hw_my_array_2_t;

  // my_array_3
  typedef struct packed {
    struct packed {
      logic [7:0]q;
    } data0;
    struct packed {
      logic [7:0]q;
    } data1;
  } simple8_reg2hw_my_array_3_t;

  // my_data_0
  typedef struct packed {
    logic [7:0]q;
  } simple8_reg2hw_my_data_0_t;

  // my_data_1
  typedef struct packed {
    logic [7:0]q;
  } simple8_reg2hw_my_data_1_t;

  // my_wide_2
  typedef struct packed {
    struct packed {
      logic [7:0]q;
    } data0;
    struct packed {
      logic [7:0]q;
    } data1;
  } simple8_reg2hw_my_wide_2_t;

  // my_ptime_high
  typedef struct packed {
    logic [7:0]q;
  } simple8_reg2hw_my_ptime_high_t;

  // my_ptime_high1
  typedef struct packed {
    logic [7:0]q;
  } simple8_reg2hw_my_ptime_high1_t;

  // my_regfile_0_control
  typedef struct packed {
    struct packed {
      logic  d;
      logic de;
    } en;
    struct packed {
      logic [1:0] d;
      logic de;
    } sel;
  } simple8_hw2reg_my_regfile_0_control_t;

  // my_regfile_0_status
  typedef struct packed {
    logic  d;
    logic de;
  } simple8_hw2reg_my_regfile_0_status_t;

  // my_regfile_0_clkdiv
  typedef struct packed {
    logic [5:0] d;
    logic de;
  } simple8_hw2reg_my_regfile_0_clkdiv_t;

  // my_regfile_1_control
  typedef struct packed {
    struct packed {
      logic  d;
      logic de;
    } en;
    struct packed {
      logic [1:0] d;
      logic de;
    } sel;
  } simple8_hw2reg_my_regfile_1_control_t;

  // my_regfile_1_status
  typedef struct packed {
    logic  d;
    logic de;
  } simple8_hw2reg_my_regfile_1_status_t;

  // my_regfile_1_clkdiv
  typedef struct packed {
    logic [5:0] d;
    logic de;
  } simple8_hw2reg_my_regfile_1_clkdiv_t;

  // my_ptime
  typedef struct packed {
    logic [7:0] d;
    logic de;
  } simple8_hw2reg_my_ptime_t;

  // my_stb
  typedef struct packed {
    logic [7:0] d;
    logic de;
  } simple8_hw2reg_my_stb_t;

  // my_wide
  typedef struct packed {
    struct packed {
      logic [7:0] d;
      logic de;
    } data0;
    struct packed {
      logic [7:0] d;
      logic de;
    } data1;
  } simple8_hw2reg_my_wide_t;

  // my_array_0
  typedef struct packed {
    struct packed {
      logic [7:0] d;
      logic de;
    } data0;
    struct packed {
      logic [7:0] d;
      logic de;
    } data1;
  } simple8_hw2reg_my_array_0_t;

  // my_array_1
  typedef struct packed {
    struct packed {
      logic [7:0] d;
      logic de;
    } data0;
    struct packed {
      logic [7:0] d;
      logic de;
    } data1;
  } simple8_hw2reg_my_array_1_t;

  // my_array_2
  typedef struct packed {
    struct packed {
      logic [7:0] d;
      logic de;
    } data0;
    struct packed {
      logic [7:0] d;
      logic de;
    } data1;
  } simple8_hw2reg_my_array_2_t;

  // my_array_3
  typedef struct packed {
    struct packed {
      logic [7:0] d;
      logic de;
    } data0;
    struct packed {
      logic [7:0] d;
      logic de;
    } data1;
  } simple8_hw2reg_my_array_3_t;

  // my_data_0
  typedef struct packed {
    logic [7:0] d;
    logic de;
  } simple8_hw2reg_my_data_0_t;

  // my_data_1
  typedef struct packed {
    logic [7:0] d;
    logic de;
  } simple8_hw2reg_my_data_1_t;

  // my_wide_2
  typedef struct packed {
    struct packed {
      logic [7:0] d;
      logic de;
    } data0;
    struct packed {
      logic [7:0] d;
      logic de;
    } data1;
  } simple8_hw2reg_my_wide_2_t;

  // my_ptime_high
  typedef struct packed {
    logic [7:0] d;
    logic de;
  } simple8_hw2reg_my_ptime_high_t;

  // my_ptime_high1
  typedef struct packed {
    logic [7:0] d;
    logic de;
  } simple8_hw2reg_my_ptime_high1_t;


  // Register -> HW
  typedef struct packed {
    simple8_reg2hw_my_regfile_0_control_t my_regfile_0_control; // 162:160
    simple8_reg2hw_my_regfile_0_clkdiv_t my_regfile_0_clkdiv; // 159:154
    simple8_reg2hw_my_regfile_1_control_t my_regfile_1_control; // 153:151
    simple8_reg2hw_my_regfile_1_clkdiv_t my_regfile_1_clkdiv; // 150:145
    simple8_reg2hw_my_ptime_t my_ptime; // 144:137
    simple8_reg2hw_my_stb_t my_stb; // 136:128
    simple8_reg2hw_my_wide_t my_wide; // 127:112
    simple8_reg2hw_my_array_0_t my_array_0; // 111:96
    simple8_reg2hw_my_array_1_t my_array_1; // 95:80
    simple8_reg2hw_my_array_2_t my_array_2; // 79:64
    simple8_reg2hw_my_array_3_t my_array_3; // 63:48
    simple8_reg2hw_my_data_0_t my_data_0; // 47:40
    simple8_reg2hw_my_data_1_t my_data_1; // 39:32
    simple8_reg2hw_my_wide_2_t my_wide_2; // 31:16
    simple8_reg2hw_my_ptime_high_t my_ptime_high; // 15:8
    simple8_reg2hw_my_ptime_high1_t my_ptime_high1; // 7:0
  } simple8_reg2hw_t;

  // HW -> Register
  typedef struct packed {
    simple8_hw2reg_my_regfile_0_status_t my_regfile_0_status; // 170:169
    simple8_hw2reg_my_regfile_0_clkdiv_t my_regfile_0_clkdiv; // 168:162
    simple8_hw2reg_my_regfile_1_status_t my_regfile_1_status; // 161:160
    simple8_hw2reg_my_regfile_1_clkdiv_t my_regfile_1_clkdiv; // 159:153
    simple8_hw2reg_my_ptime_t my_ptime; // 152:144
    simple8_hw2reg_my_wide_t my_wide; // 143:126
    simple8_hw2reg_my_array_0_t my_array_0; // 125:108
    simple8_hw2reg_my_array_1_t my_array_1; // 107:90
    simple8_hw2reg_my_array_2_t my_array_2; // 89:72
    simple8_hw2reg_my_array_3_t my_array_3; // 71:54
    simple8_hw2reg_my_data_0_t my_data_0; // 53:45
    simple8_hw2reg_my_data_1_t my_data_1; // 44:36
    simple8_hw2reg_my_wide_2_t my_wide_2; // 35:18
    simple8_hw2reg_my_ptime_high_t my_ptime_high; // 17:9
    simple8_hw2reg_my_ptime_high1_t my_ptime_high1; // 8:0
  } simple8_hw2reg_t;

  // Register address offsets
  parameter logic [BlockAw-1:0] SIMPLE8_MY_REGFILE_0_CONTROL_OFFSET = 12'h0;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_REGFILE_0_STATUS_OFFSET = 12'h1;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_REGFILE_0_CLKDIV_OFFSET = 12'h2;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_REGFILE_1_CONTROL_OFFSET = 12'h3;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_REGFILE_1_STATUS_OFFSET = 12'h4;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_REGFILE_1_CLKDIV_OFFSET = 12'h5;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_PTIME_OFFSET = 12'hC;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_STB_OFFSET = 12'hD;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_WIDE_0_OFFSET = 12'h10;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_WIDE_1_OFFSET = 12'h11;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_ARRAY_0_0_OFFSET = 12'h20;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_ARRAY_0_1_OFFSET = 12'h21;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_ARRAY_1_0_OFFSET = 12'h22;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_ARRAY_1_1_OFFSET = 12'h23;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_ARRAY_2_0_OFFSET = 12'h24;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_ARRAY_2_1_OFFSET = 12'h25;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_ARRAY_3_0_OFFSET = 12'h26;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_ARRAY_3_1_OFFSET = 12'h27;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_DATA_0_OFFSET = 12'h30;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_DATA_1_OFFSET = 12'h31;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_WIDE_2_0_OFFSET = 12'h40;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_WIDE_2_1_OFFSET = 12'h41;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_PTIME_HIGH_OFFSET = 12'hFF8;
  parameter logic [BlockAw-1:0] SIMPLE8_MY_PTIME_HIGH1_OFFSET = 12'hFFC;

endpackage
