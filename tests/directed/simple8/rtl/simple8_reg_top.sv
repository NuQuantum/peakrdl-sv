// Copyright Nu Quantum Ltd
// SPDX-License-Identifier: MIT
//
// Auto-generated by peakrdl-sv


module simple8_reg_top
  import rdl_subreg_pkg::*;
#(
  parameter reset_type_e ResetType = ActiveHighSync
) (
  input logic clk,
  input logic rst,

  // Bus I/F
  // REVISIT: hacked to the Migen CSR bus for now.
  input logic csr_we,
  input logic csr_re,
  input logic [31:0] csr_addr,
  input logic [7:0] csr_wdata,
  output logic [7:0] csr_rdata,

  // HW I/F
  output simple8_reg_pkg::simple8_reg2hw_t reg2hw, // Write
  input  simple8_reg_pkg::simple8_hw2reg_t hw2reg  // Read

);

  import simple8_reg_pkg::*;

  localparam int AW  = 12;
  localparam int DW  = 8;
  localparam int DBW = DW/8;

  // --------------------------------------------------------------------------------
  // Logic Declarations
  // --------------------------------------------------------------------------------

  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_wstrb;
  logic [DW-1:0]  reg_rdata;


  // --------------------------------------------------------------------------------
  // REVISIT: temporary hack
  // --------------------------------------------------------------------------------

  assign reg_we    = csr_we;
  assign reg_re    = csr_re;
  assign reg_addr  = csr_addr[AW-1:0];
  assign reg_wdata = csr_wdata;
  assign reg_wstrb = '1;
  assign csr_rdata = reg_rdata;


  // --------------------------------------------------------------------------------
  // Software Logic Declarations
  // --------------------------------------------------------------------------------

  logic my_regfile_0_control_re;
  logic my_regfile_0_control_we;
  logic  my_regfile_0_control_en_wd;
  logic [1:0] my_regfile_0_control_sel_wd;
  logic my_regfile_0_clkdiv_re;
  logic my_regfile_0_clkdiv_we;
  logic [5:0] my_regfile_0_clkdiv_divlen_wd;
  logic my_regfile_1_control_re;
  logic my_regfile_1_control_we;
  logic  my_regfile_1_control_en_wd;
  logic [1:0] my_regfile_1_control_sel_wd;
  logic my_regfile_1_clkdiv_re;
  logic my_regfile_1_clkdiv_we;
  logic [5:0] my_regfile_1_clkdiv_divlen_wd;
  logic my_ptime_re;
  logic my_ptime_we;
  logic [7:0] my_ptime_playtime_wd;
  logic my_stb_we;
  logic [7:0] my_stb_data_wd;
  logic my_wide_0_re;
  logic my_wide_1_re;
  logic my_wide_0_we;
  logic my_wide_1_we;
  logic [7:0] my_wide_data0_wd;
  logic [7:0] my_wide_data1_wd;
  logic my_array_0_0_re;
  logic my_array_0_1_re;
  logic my_array_0_0_we;
  logic my_array_0_1_we;
  logic [7:0] my_array_0_data0_wd;
  logic [7:0] my_array_0_data1_wd;
  logic my_array_1_0_re;
  logic my_array_1_1_re;
  logic my_array_1_0_we;
  logic my_array_1_1_we;
  logic [7:0] my_array_1_data0_wd;
  logic [7:0] my_array_1_data1_wd;
  logic my_array_2_0_re;
  logic my_array_2_1_re;
  logic my_array_2_0_we;
  logic my_array_2_1_we;
  logic [7:0] my_array_2_data0_wd;
  logic [7:0] my_array_2_data1_wd;
  logic my_array_3_0_re;
  logic my_array_3_1_re;
  logic my_array_3_0_we;
  logic my_array_3_1_we;
  logic [7:0] my_array_3_data0_wd;
  logic [7:0] my_array_3_data1_wd;
  logic my_data_0_re;
  logic my_data_0_we;
  logic [7:0] my_data_0_a_wd;
  logic my_data_1_re;
  logic my_data_1_we;
  logic [7:0] my_data_1_a_wd;
  logic my_wide_2_0_re;
  logic my_wide_2_1_re;
  logic my_wide_2_0_we;
  logic my_wide_2_1_we;
  logic [7:0] my_wide_2_data0_wd;
  logic [7:0] my_wide_2_data1_wd;
  logic my_ptime_high_re;
  logic my_ptime_high_we;
  logic [7:0] my_ptime_high_playtime_wd;
  logic my_ptime_high1_re;
  logic my_ptime_high1_we;
  logic [7:0] my_ptime_high1_playtime_wd;

  // --------------------------------------------------------------------------------
  // Field Logic
  // --------------------------------------------------------------------------------

  // Register[control] Field[en] Bits[0]
  logic  my_regfile_0_control_en_qs;
  rdl_subreg #(
    .DW         (1),
    .ResetType  (ResetType),
    .ResetValue (1'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_regfile_0_control_en (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_regfile_0_control_we),
    .wd  (my_regfile_0_control_en_wd),
    .de  ('0),
    .d   ('0),
    .qs  (my_regfile_0_control_en_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_regfile_0_control.en.q)
  );

  // Register[control] Field[sel] Bits[2:1]
  logic [1:0] my_regfile_0_control_sel_qs;
  rdl_subreg #(
    .DW         (2),
    .ResetType  (ResetType),
    .ResetValue (2'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_regfile_0_control_sel (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_regfile_0_control_we),
    .wd  (my_regfile_0_control_sel_wd),
    .de  ('0),
    .d   ('0),
    .qs  (my_regfile_0_control_sel_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_regfile_0_control.sel.q)
  );

  // Register[status] Field[irq] Bits[0]
  logic  my_regfile_0_status_irq_qs;
  rdl_subreg #(
    .DW         (1),
    .ResetType  (ResetType),
    .ResetValue (1'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_regfile_0_status_irq (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (),
    .wd  (),
    .de  (hw2reg.my_regfile_0_status.de),
    .d   (hw2reg.my_regfile_0_status.d),
    .qs  (my_regfile_0_status_irq_qs),
    .qe  (),
    .qre (),
    .q   ()
  );

  // Register[clkdiv] Field[divlen] Bits[5:0]
  logic [5:0] my_regfile_0_clkdiv_divlen_qs;
  rdl_subreg #(
    .DW         (6),
    .ResetType  (ResetType),
    .ResetValue (6'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_regfile_0_clkdiv_divlen (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_regfile_0_clkdiv_we),
    .wd  (my_regfile_0_clkdiv_divlen_wd),
    .de  (hw2reg.my_regfile_0_clkdiv.de),
    .d   (hw2reg.my_regfile_0_clkdiv.d),
    .qs  (my_regfile_0_clkdiv_divlen_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_regfile_0_clkdiv.q)
  );

  // Register[control] Field[en] Bits[0]
  logic  my_regfile_1_control_en_qs;
  rdl_subreg #(
    .DW         (1),
    .ResetType  (ResetType),
    .ResetValue (1'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_regfile_1_control_en (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_regfile_1_control_we),
    .wd  (my_regfile_1_control_en_wd),
    .de  ('0),
    .d   ('0),
    .qs  (my_regfile_1_control_en_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_regfile_1_control.en.q)
  );

  // Register[control] Field[sel] Bits[2:1]
  logic [1:0] my_regfile_1_control_sel_qs;
  rdl_subreg #(
    .DW         (2),
    .ResetType  (ResetType),
    .ResetValue (2'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_regfile_1_control_sel (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_regfile_1_control_we),
    .wd  (my_regfile_1_control_sel_wd),
    .de  ('0),
    .d   ('0),
    .qs  (my_regfile_1_control_sel_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_regfile_1_control.sel.q)
  );

  // Register[status] Field[irq] Bits[0]
  logic  my_regfile_1_status_irq_qs;
  rdl_subreg #(
    .DW         (1),
    .ResetType  (ResetType),
    .ResetValue (1'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_regfile_1_status_irq (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (),
    .wd  (),
    .de  (hw2reg.my_regfile_1_status.de),
    .d   (hw2reg.my_regfile_1_status.d),
    .qs  (my_regfile_1_status_irq_qs),
    .qe  (),
    .qre (),
    .q   ()
  );

  // Register[clkdiv] Field[divlen] Bits[5:0]
  logic [5:0] my_regfile_1_clkdiv_divlen_qs;
  rdl_subreg #(
    .DW         (6),
    .ResetType  (ResetType),
    .ResetValue (6'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_regfile_1_clkdiv_divlen (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_regfile_1_clkdiv_we),
    .wd  (my_regfile_1_clkdiv_divlen_wd),
    .de  (hw2reg.my_regfile_1_clkdiv.de),
    .d   (hw2reg.my_regfile_1_clkdiv.d),
    .qs  (my_regfile_1_clkdiv_divlen_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_regfile_1_clkdiv.q)
  );

  // Register[my_ptime] Field[playtime] Bits[7:0]
  logic [7:0] my_ptime_playtime_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd1),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_ptime_playtime (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_ptime_we),
    .wd  (my_ptime_playtime_wd),
    .de  (hw2reg.my_ptime.de),
    .d   (hw2reg.my_ptime.d),
    .qs  (my_ptime_playtime_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_ptime.q)
  );

  // Register[my_stb] Field[data] Bits[7:0]
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd1),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_stb_data (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_stb_we),
    .wd  (my_stb_data_wd),
    .de  ('0),
    .d   ('0),
    .qs  (),
    .qe  (reg2hw.my_stb.qe),
    .qre (),
    .q   (reg2hw.my_stb.q)
  );

  // Register[my_wide] Field[data0] Bits[7:0]
  logic [7:0] my_wide_data0_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_wide_data0 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_wide_0_we),
    .wd  (my_wide_data0_wd),
    .de  (hw2reg.my_wide.data0.de),
    .d   (hw2reg.my_wide.data0.d),
    .qs  (my_wide_data0_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_wide.data0.q)
  );

  // Register[my_wide] Field[data1] Bits[15:8]
  logic [7:0] my_wide_data1_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_wide_data1 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_wide_1_we),
    .wd  (my_wide_data1_wd),
    .de  (hw2reg.my_wide.data1.de),
    .d   (hw2reg.my_wide.data1.d),
    .qs  (my_wide_data1_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_wide.data1.q)
  );

  // Register[my_array] Field[data0] Bits[7:0]
  logic [7:0] my_array_0_data0_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_array_0_data0 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_array_0_0_we),
    .wd  (my_array_0_data0_wd),
    .de  (hw2reg.my_array_0.data0.de),
    .d   (hw2reg.my_array_0.data0.d),
    .qs  (my_array_0_data0_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_array_0.data0.q)
  );

  // Register[my_array] Field[data1] Bits[15:8]
  logic [7:0] my_array_0_data1_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_array_0_data1 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_array_0_1_we),
    .wd  (my_array_0_data1_wd),
    .de  (hw2reg.my_array_0.data1.de),
    .d   (hw2reg.my_array_0.data1.d),
    .qs  (my_array_0_data1_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_array_0.data1.q)
  );

  // Register[my_array] Field[data0] Bits[7:0]
  logic [7:0] my_array_1_data0_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_array_1_data0 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_array_1_0_we),
    .wd  (my_array_1_data0_wd),
    .de  (hw2reg.my_array_1.data0.de),
    .d   (hw2reg.my_array_1.data0.d),
    .qs  (my_array_1_data0_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_array_1.data0.q)
  );

  // Register[my_array] Field[data1] Bits[15:8]
  logic [7:0] my_array_1_data1_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_array_1_data1 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_array_1_1_we),
    .wd  (my_array_1_data1_wd),
    .de  (hw2reg.my_array_1.data1.de),
    .d   (hw2reg.my_array_1.data1.d),
    .qs  (my_array_1_data1_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_array_1.data1.q)
  );

  // Register[my_array] Field[data0] Bits[7:0]
  logic [7:0] my_array_2_data0_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_array_2_data0 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_array_2_0_we),
    .wd  (my_array_2_data0_wd),
    .de  (hw2reg.my_array_2.data0.de),
    .d   (hw2reg.my_array_2.data0.d),
    .qs  (my_array_2_data0_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_array_2.data0.q)
  );

  // Register[my_array] Field[data1] Bits[15:8]
  logic [7:0] my_array_2_data1_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_array_2_data1 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_array_2_1_we),
    .wd  (my_array_2_data1_wd),
    .de  (hw2reg.my_array_2.data1.de),
    .d   (hw2reg.my_array_2.data1.d),
    .qs  (my_array_2_data1_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_array_2.data1.q)
  );

  // Register[my_array] Field[data0] Bits[7:0]
  logic [7:0] my_array_3_data0_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_array_3_data0 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_array_3_0_we),
    .wd  (my_array_3_data0_wd),
    .de  (hw2reg.my_array_3.data0.de),
    .d   (hw2reg.my_array_3.data0.d),
    .qs  (my_array_3_data0_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_array_3.data0.q)
  );

  // Register[my_array] Field[data1] Bits[15:8]
  logic [7:0] my_array_3_data1_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_array_3_data1 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_array_3_1_we),
    .wd  (my_array_3_data1_wd),
    .de  (hw2reg.my_array_3.data1.de),
    .d   (hw2reg.my_array_3.data1.d),
    .qs  (my_array_3_data1_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_array_3.data1.q)
  );

  // Register[my_data] Field[a] Bits[7:0]
  logic [7:0] my_data_0_a_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_data_0_a (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_data_0_we),
    .wd  (my_data_0_a_wd),
    .de  (hw2reg.my_data_0.de),
    .d   (hw2reg.my_data_0.d),
    .qs  (my_data_0_a_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_data_0.q)
  );

  // Register[my_data] Field[a] Bits[7:0]
  logic [7:0] my_data_1_a_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_data_1_a (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_data_1_we),
    .wd  (my_data_1_a_wd),
    .de  (hw2reg.my_data_1.de),
    .d   (hw2reg.my_data_1.d),
    .qs  (my_data_1_a_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_data_1.q)
  );

  // Register[my_wide_2] Field[data0] Bits[7:0]
  logic [7:0] my_wide_2_data0_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_wide_2_data0 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_wide_2_0_we),
    .wd  (my_wide_2_data0_wd),
    .de  (hw2reg.my_wide_2.data0.de),
    .d   (hw2reg.my_wide_2.data0.d),
    .qs  (my_wide_2_data0_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_wide_2.data0.q)
  );

  // Register[my_wide_2] Field[data1] Bits[15:8]
  logic [7:0] my_wide_2_data1_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd0),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_wide_2_data1 (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_wide_2_1_we),
    .wd  (my_wide_2_data1_wd),
    .de  (hw2reg.my_wide_2.data1.de),
    .d   (hw2reg.my_wide_2.data1.d),
    .qs  (my_wide_2_data1_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_wide_2.data1.q)
  );

  // Register[my_ptime_high] Field[playtime] Bits[7:0]
  logic [7:0] my_ptime_high_playtime_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd1),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_ptime_high_playtime (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_ptime_high_we),
    .wd  (my_ptime_high_playtime_wd),
    .de  (hw2reg.my_ptime_high.de),
    .d   (hw2reg.my_ptime_high.d),
    .qs  (my_ptime_high_playtime_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_ptime_high.q)
  );

  // Register[my_ptime_high1] Field[playtime] Bits[7:0]
  logic [7:0] my_ptime_high1_playtime_qs;
  rdl_subreg #(
    .DW         (8),
    .ResetType  (ResetType),
    .ResetValue (8'd1),
    .OnRead     (OnReadNone),
    .OnWrite    (OnWriteNone)
  ) u_my_ptime_high1_playtime (
    .clk (clk),
    .rst (rst),
    .re  (),
    .we  (my_ptime_high1_we),
    .wd  (my_ptime_high1_playtime_wd),
    .de  (hw2reg.my_ptime_high1.de),
    .d   (hw2reg.my_ptime_high1.d),
    .qs  (my_ptime_high1_playtime_qs),
    .qe  (),
    .qre (),
    .q   (reg2hw.my_ptime_high1.q)
  );


  // --------------------------------------------------------------------------------
  // Address Decode
  // --------------------------------------------------------------------------------

  logic [23:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SIMPLE8_MY_REGFILE_0_CONTROL_OFFSET);
    addr_hit[ 2] = (reg_addr == SIMPLE8_MY_REGFILE_0_CLKDIV_OFFSET);
    addr_hit[ 3] = (reg_addr == SIMPLE8_MY_REGFILE_1_CONTROL_OFFSET);
    addr_hit[ 5] = (reg_addr == SIMPLE8_MY_REGFILE_1_CLKDIV_OFFSET);
    addr_hit[ 6] = (reg_addr == SIMPLE8_MY_PTIME_OFFSET);
    addr_hit[ 7] = (reg_addr == SIMPLE8_MY_STB_OFFSET);
    addr_hit[ 8] = (reg_addr == SIMPLE8_MY_WIDE_0_OFFSET);
    addr_hit[ 9] = (reg_addr == SIMPLE8_MY_WIDE_1_OFFSET);
    addr_hit[10] = (reg_addr == SIMPLE8_MY_ARRAY_0_0_OFFSET);
    addr_hit[11] = (reg_addr == SIMPLE8_MY_ARRAY_0_1_OFFSET);
    addr_hit[12] = (reg_addr == SIMPLE8_MY_ARRAY_1_0_OFFSET);
    addr_hit[13] = (reg_addr == SIMPLE8_MY_ARRAY_1_1_OFFSET);
    addr_hit[14] = (reg_addr == SIMPLE8_MY_ARRAY_2_0_OFFSET);
    addr_hit[15] = (reg_addr == SIMPLE8_MY_ARRAY_2_1_OFFSET);
    addr_hit[16] = (reg_addr == SIMPLE8_MY_ARRAY_3_0_OFFSET);
    addr_hit[17] = (reg_addr == SIMPLE8_MY_ARRAY_3_1_OFFSET);
    addr_hit[18] = (reg_addr == SIMPLE8_MY_DATA_0_OFFSET);
    addr_hit[19] = (reg_addr == SIMPLE8_MY_DATA_1_OFFSET);
    addr_hit[20] = (reg_addr == SIMPLE8_MY_WIDE_2_0_OFFSET);
    addr_hit[21] = (reg_addr == SIMPLE8_MY_WIDE_2_1_OFFSET);
    addr_hit[22] = (reg_addr == SIMPLE8_MY_PTIME_HIGH_OFFSET);
    addr_hit[23] = (reg_addr == SIMPLE8_MY_PTIME_HIGH1_OFFSET);
  end

  // --------------------------------------------------------------------------------
  // Write Enables
  // --------------------------------------------------------------------------------

  assign my_regfile_0_control_we = addr_hit[0] && reg_we;
  assign my_regfile_0_control_re = addr_hit[0] && reg_re;
  assign my_regfile_0_control_en_wd = reg_wdata[0];
  assign my_regfile_0_control_sel_wd = reg_wdata[2:1];
  assign my_regfile_0_clkdiv_we = addr_hit[2] && reg_we;
  assign my_regfile_0_clkdiv_re = addr_hit[2] && reg_re;
  assign my_regfile_0_clkdiv_divlen_wd = reg_wdata[5:0];
  assign my_regfile_1_control_we = addr_hit[3] && reg_we;
  assign my_regfile_1_control_re = addr_hit[3] && reg_re;
  assign my_regfile_1_control_en_wd = reg_wdata[0];
  assign my_regfile_1_control_sel_wd = reg_wdata[2:1];
  assign my_regfile_1_clkdiv_we = addr_hit[5] && reg_we;
  assign my_regfile_1_clkdiv_re = addr_hit[5] && reg_re;
  assign my_regfile_1_clkdiv_divlen_wd = reg_wdata[5:0];
  assign my_ptime_we = addr_hit[6] && reg_we;
  assign my_ptime_re = addr_hit[6] && reg_re;
  assign my_ptime_playtime_wd = reg_wdata[7:0];
  assign my_stb_we = addr_hit[7] && reg_we;
  assign my_stb_data_wd = reg_wdata[7:0];
  assign my_wide_0_we = addr_hit[8] && reg_we;
  assign my_wide_1_we = addr_hit[9] && reg_we;
  assign my_wide_0_re = addr_hit[8] && reg_re;
  assign my_wide_1_re = addr_hit[9] && reg_re;
  assign my_wide_data0_wd = reg_wdata[7:0];
  assign my_wide_data1_wd = reg_wdata[7:0];
  assign my_array_0_0_we = addr_hit[10] && reg_we;
  assign my_array_0_1_we = addr_hit[11] && reg_we;
  assign my_array_0_0_re = addr_hit[10] && reg_re;
  assign my_array_0_1_re = addr_hit[11] && reg_re;
  assign my_array_0_data0_wd = reg_wdata[7:0];
  assign my_array_0_data1_wd = reg_wdata[7:0];
  assign my_array_1_0_we = addr_hit[12] && reg_we;
  assign my_array_1_1_we = addr_hit[13] && reg_we;
  assign my_array_1_0_re = addr_hit[12] && reg_re;
  assign my_array_1_1_re = addr_hit[13] && reg_re;
  assign my_array_1_data0_wd = reg_wdata[7:0];
  assign my_array_1_data1_wd = reg_wdata[7:0];
  assign my_array_2_0_we = addr_hit[14] && reg_we;
  assign my_array_2_1_we = addr_hit[15] && reg_we;
  assign my_array_2_0_re = addr_hit[14] && reg_re;
  assign my_array_2_1_re = addr_hit[15] && reg_re;
  assign my_array_2_data0_wd = reg_wdata[7:0];
  assign my_array_2_data1_wd = reg_wdata[7:0];
  assign my_array_3_0_we = addr_hit[16] && reg_we;
  assign my_array_3_1_we = addr_hit[17] && reg_we;
  assign my_array_3_0_re = addr_hit[16] && reg_re;
  assign my_array_3_1_re = addr_hit[17] && reg_re;
  assign my_array_3_data0_wd = reg_wdata[7:0];
  assign my_array_3_data1_wd = reg_wdata[7:0];
  assign my_data_0_we = addr_hit[18] && reg_we;
  assign my_data_0_re = addr_hit[18] && reg_re;
  assign my_data_0_a_wd = reg_wdata[7:0];
  assign my_data_1_we = addr_hit[19] && reg_we;
  assign my_data_1_re = addr_hit[19] && reg_re;
  assign my_data_1_a_wd = reg_wdata[7:0];
  assign my_wide_2_0_we = addr_hit[20] && reg_we;
  assign my_wide_2_1_we = addr_hit[21] && reg_we;
  assign my_wide_2_0_re = addr_hit[20] && reg_re;
  assign my_wide_2_1_re = addr_hit[21] && reg_re;
  assign my_wide_2_data0_wd = reg_wdata[7:0];
  assign my_wide_2_data1_wd = reg_wdata[7:0];
  assign my_ptime_high_we = addr_hit[22] && reg_we;
  assign my_ptime_high_re = addr_hit[22] && reg_re;
  assign my_ptime_high_playtime_wd = reg_wdata[7:0];
  assign my_ptime_high1_we = addr_hit[23] && reg_we;
  assign my_ptime_high1_re = addr_hit[23] && reg_re;
  assign my_ptime_high1_playtime_wd = reg_wdata[7:0];

  // --------------------------------------------------------------------------------
  // Read Data Mux
  // --------------------------------------------------------------------------------

  always_comb begin
    reg_rdata = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata[0] = my_regfile_0_control_en_qs;
        reg_rdata[2:1] = my_regfile_0_control_sel_qs;
      end
      addr_hit[1]: begin
        reg_rdata[0] = my_regfile_0_status_irq_qs;
      end
      addr_hit[2]: begin
        reg_rdata[5:0] = my_regfile_0_clkdiv_divlen_qs;
      end
      addr_hit[3]: begin
        reg_rdata[0] = my_regfile_1_control_en_qs;
        reg_rdata[2:1] = my_regfile_1_control_sel_qs;
      end
      addr_hit[4]: begin
        reg_rdata[0] = my_regfile_1_status_irq_qs;
      end
      addr_hit[5]: begin
        reg_rdata[5:0] = my_regfile_1_clkdiv_divlen_qs;
      end
      addr_hit[6]: begin
        reg_rdata[7:0] = my_ptime_playtime_qs;
      end
      addr_hit[7]: begin
        reg_rdata[7:0] = '0;
      end
      addr_hit[8]: begin
        reg_rdata[7:0] = my_wide_data0_qs;
      end
      addr_hit[9]: begin
        reg_rdata[7:0] = my_wide_data1_qs;
      end
      addr_hit[10]: begin
        reg_rdata[7:0] = my_array_0_data0_qs;
      end
      addr_hit[11]: begin
        reg_rdata[7:0] = my_array_0_data1_qs;
      end
      addr_hit[12]: begin
        reg_rdata[7:0] = my_array_1_data0_qs;
      end
      addr_hit[13]: begin
        reg_rdata[7:0] = my_array_1_data1_qs;
      end
      addr_hit[14]: begin
        reg_rdata[7:0] = my_array_2_data0_qs;
      end
      addr_hit[15]: begin
        reg_rdata[7:0] = my_array_2_data1_qs;
      end
      addr_hit[16]: begin
        reg_rdata[7:0] = my_array_3_data0_qs;
      end
      addr_hit[17]: begin
        reg_rdata[7:0] = my_array_3_data1_qs;
      end
      addr_hit[18]: begin
        reg_rdata[7:0] = my_data_0_a_qs;
      end
      addr_hit[19]: begin
        reg_rdata[7:0] = my_data_1_a_qs;
      end
      addr_hit[20]: begin
        reg_rdata[7:0] = my_wide_2_data0_qs;
      end
      addr_hit[21]: begin
        reg_rdata[7:0] = my_wide_2_data1_qs;
      end
      addr_hit[22]: begin
        reg_rdata[7:0] = my_ptime_high_playtime_qs;
      end
      addr_hit[23]: begin
        reg_rdata[7:0] = my_ptime_high1_playtime_qs;
      end
      default: begin
        reg_rdata = 'X;
      end
    endcase
  end

endmodule
